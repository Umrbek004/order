stages:
  - build
  - build-image
  - deploy

variables:
  IMAGE_NAME: "${CI_REGISTRY}/${CI_PROJECT_NAMESPACE}/${CI_PROJECT_NAME}:${CI_COMMIT_SHA}"

build:
  stage: build
  image: maven:latest
  script:
    - mvn clean package -DskipTests
    - ls -lh target/  # 🔍 Debug: Check if JAR is created
    - find target/ -type f -name "*.jar" -exec du -h {} +  # 🔍 Debug: Show JAR size
  artifacts:
    paths:
      - target/*.jar
    expire_in: 1 hour  # Ensure artifacts don't get deleted immediately
  only:
    - main

build-image:
  stage: build-image
  image: docker:latest
  services:
    - docker:dind
  dependencies:
    - build
  before_script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD registry.gitlab.com
  script:
    - ls -lh target/  # 🔍 Debug: Ensure JAR is available before copying
    - cp target/*.jar .  # Move JAR to Docker build context
    - docker build -t $IMAGE_NAME .
    - docker push $IMAGE_NAME
    - docker tag $IMAGE_NAME "${CI_REGISTRY}/${CI_PROJECT_NAMESPACE}/${CI_PROJECT_NAME}:latest"
    - docker rmi $IMAGE_NAME
    - docker rmi "${CI_REGISTRY}/${CI_PROJECT_NAMESPACE}/${CI_PROJECT_NAME}:latest"
    - docker image prune -f || true
  only:
    - main
deploy:
  stage: deploy
  image: alpine:latest
  before_script:
    - apk add --no-cache openssh-client
    - mkdir -p ~/.ssh
    - echo "$SERVER_PRIVATE_KEY" > ~/.ssh/id_ed25519
    - chmod 600 ~/.ssh/id_ed25519
    - ssh-keyscan $SERVER_IP >> ~/.ssh/known_hosts
  script:
    - |
      ssh -o StrictHostKeyChecking=no $SERVER_USERNAME@$SERVER_IP "
        docker login $CI_REGISTRY --username $CI_REGISTRY_USER --password $CI_REGISTRY_PASSWORD &&
        docker pull $IMAGE_NAME &&
        docker stop orm-app || true &&
        docker rm orm-app || true &&
        docker image prune -af || true &&

        docker run -d --name orm-app \
          -e SPRING_DATASOURCE_URL=jdbc:postgresql://postgres-db:5432/orm_app_db \
          -e SPRING_DATASOURCE_USERNAME=postgres \
          -e SPRING_DATASOURCE_PASSWORD=postgres \
          -p 8888:8888 \
          $IMAGE_NAME
        docker network connect db_network orm-app || true 
      "
  only:
    - main